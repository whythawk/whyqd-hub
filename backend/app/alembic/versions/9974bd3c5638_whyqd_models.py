"""Whyqd models

Revision ID: 9974bd3c5638
Revises: 8188d671489a
Create Date: 2023-07-05 15:22:42.187205

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "9974bd3c5638"
down_revision = "8188d671489a"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "product",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column(
            "subscription",
            postgresql.ENUM(
                "REVIEWER",
                "EXPLORER",
                "RESEARCHER",
                "INVESTIGATOR",
                name="subscriptiontype",
                checkfirst=True,
            ),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_product_description"), "product", ["description"], unique=False)
    op.create_index(op.f("ix_product_id"), "product", ["id"], unique=False)
    op.create_index(op.f("ix_product_name"), "product", ["name"], unique=False)
    op.create_table(
        "reference",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("is_private", sa.Boolean(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("title", sa.String(), nullable=True),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("model", sa.UUID(), nullable=False),
        sa.Column(
            "model_type",
            postgresql.ENUM(
                "DATASOURCE",
                "DATA",
                "SCHEMA",
                "CROSSWALK",
                "TRANSFORM",
                name="referencetype",
                checkfirst=True,
            ),
            nullable=False,
        ),
        sa.Column("hash", sa.String(), nullable=True),
        sa.Column(
            "mime_type",
            postgresql.ENUM(
                "CSV",
                "XLS",
                "XLSX",
                "PARQUET",
                "FEATHER",
                name="mimetype",
                checkfirst=True,
            ),
            nullable=True,
        ),
        sa.Column("index", sa.Integer(), nullable=True),
        sa.Column("older_id", sa.UUID(), nullable=True),
        sa.Column("version", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["older_id"],
            ["reference.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_reference_description"), "reference", ["description"], unique=False)
    op.create_index(op.f("ix_reference_hash"), "reference", ["hash"], unique=False)
    op.create_index(op.f("ix_reference_id"), "reference", ["id"], unique=False)
    op.create_index(op.f("ix_reference_model"), "reference", ["model"], unique=False)
    op.create_index(op.f("ix_reference_model_type"), "reference", ["model_type"], unique=False)
    op.create_index(op.f("ix_reference_name"), "reference", ["name"], unique=False)
    op.create_index(op.f("ix_reference_title"), "reference", ["title"], unique=False)
    op.create_table(
        "referencetemplate",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("is_private", sa.Boolean(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("title", sa.String(), nullable=True),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("model", sa.UUID(), nullable=False),
        sa.Column(
            "model_type",
            postgresql.ENUM(
                "DATASOURCE",
                "DATA",
                "SCHEMA",
                "CROSSWALK",
                "TRANSFORM",
                name="referencetype",
                checkfirst=True,
            ),
            nullable=False,
        ),
        sa.Column(
            "mime_type",
            postgresql.ENUM(
                "CSV",
                "XLS",
                "XLSX",
                "PARQUET",
                "FEATHER",
                name="mimetype",
                checkfirst=True,
            ),
            nullable=True,
        ),
        sa.Column("older_id", sa.UUID(), nullable=True),
        sa.Column("version", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["older_id"],
            ["referencetemplate.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_referencetemplate_description"), "referencetemplate", ["description"], unique=False)
    op.create_index(op.f("ix_referencetemplate_id"), "referencetemplate", ["id"], unique=False)
    op.create_index(op.f("ix_referencetemplate_model"), "referencetemplate", ["model"], unique=True)
    op.create_index(op.f("ix_referencetemplate_model_type"), "referencetemplate", ["model_type"], unique=False)
    op.create_index(op.f("ix_referencetemplate_name"), "referencetemplate", ["name"], unique=False)
    op.create_index(op.f("ix_referencetemplate_title"), "referencetemplate", ["title"], unique=False)
    op.create_table(
        "subject",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("term", sa.String(length=64), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_subject_id"), "subject", ["id"], unique=False)
    op.create_table(
        "oguntoken",
        sa.Column("created", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("token", sa.String(), nullable=False),
        sa.Column("authenticates_id", sa.UUID(), nullable=False),
        sa.Column(
            "responsibility",
            postgresql.ENUM(
                "CUSTODIAN",
                "CURATOR",
                "WRANGLER",
                "SEEKER",
                name="roletype",
                checkfirst=True,
            ),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["authenticates_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("token"),
    )
    op.create_index(op.f("ix_oguntoken_token"), "oguntoken", ["token"], unique=False)
    op.create_table(
        "order",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column(
            "subscription_event_type",
            postgresql.ENUM(
                "PENDING",
                "CREATED",
                "COMPLETED",
                "RENEWED",
                "FAILED",
                "ENDED",
                name="subscriptioneventtype",
                checkfirst=True,
            ),
            nullable=False,
        ),
        sa.Column(
            "subscription_type",
            postgresql.ENUM(
                "REVIEWER",
                "EXPLORER",
                "RESEARCHER",
                "INVESTIGATOR",
                name="subscriptiontype",
                checkfirst=True,
            ),
            nullable=False,
        ),
        sa.Column(
            "currency",
            postgresql.ENUM(
                "USD",
                "GBP",
                "EUR",
                name="currencytype",
                checkfirst=True,
            ),
            nullable=False,
        ),
        sa.Column("amount", sa.Integer(), nullable=False),
        sa.Column("checkout_id", sa.String(), nullable=False),
        sa.Column("subscription_id", sa.String(), nullable=False),
        sa.Column("charge_id", sa.String(), nullable=False),
        sa.Column("invoice_url", sa.String(), nullable=False),
        sa.Column("country_code", sa.String(length=3), nullable=False),
        sa.Column("country_name", sa.String(), nullable=False),
        sa.Column("product_id", sa.String(), nullable=False),
        sa.Column("price_id", sa.String(), nullable=False),
        sa.Column("payer_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["payer_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_order_checkout_id"), "order", ["checkout_id"], unique=False)
    op.create_index(op.f("ix_order_id"), "order", ["id"], unique=False)
    op.create_index(op.f("ix_order_product_id"), "order", ["product_id"], unique=False)
    op.create_index(op.f("ix_order_subscription_id"), "order", ["subscription_id"], unique=False)
    op.create_table(
        "price",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column(
            "currency",
            postgresql.ENUM(
                "USD",
                "GBP",
                "EUR",
                name="currencytype",
                checkfirst=True,
            ),
            nullable=False,
        ),
        sa.Column("per_annum", sa.Integer(), nullable=False),
        sa.Column("per_month", sa.Integer(), nullable=False),
        sa.Column("product_id", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["product_id"],
            ["product.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_price_id"), "price", ["id"], unique=False)
    op.create_table(
        "project",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("modified", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("is_private", sa.Boolean(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("title", sa.String(), nullable=True),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("frequency", sa.String(), nullable=True),
        sa.Column("spatial", sa.String(), nullable=True),
        sa.Column("temporalStart", sa.DateTime(timezone=True), nullable=True),
        sa.Column("temporalEnd", sa.DateTime(timezone=True), nullable=True),
        sa.Column("language", sa.String(length=64), nullable=True),
        sa.Column("creator", sa.String(), nullable=True),
        sa.Column("contributor", sa.String(), nullable=True),
        sa.Column("publisher", sa.String(), nullable=True),
        sa.Column("rights", sa.String(), nullable=True),
        sa.Column("source", sa.String(), nullable=True),
        sa.Column("accessRights", sa.String(), nullable=True),
        sa.Column(
            "accrualMethod",
            postgresql.ENUM(
                "DEPOSIT",
                "DONATION",
                "PURCHASE",
                "LOAN",
                "LICENSE",
                "ITEMCREATION",
                name="dcaccrualtype",
                checkfirst=True,
            ),
            nullable=True,
        ),
        sa.Column(
            "accrualPeriodicity",
            postgresql.ENUM(
                "TRIENNIAL",
                "BIENNIAL",
                "ANNUAL",
                "SEMIANNUAL",
                "THREETIMESAYEAR",
                "QUARTERLY",
                "BIMONTHLY",
                "MONTHLY",
                "SEMIMONTHLY",
                "BIWEEKLY",
                "THREETIMESAMONTH",
                "WEEKLY",
                "SEMIWEEKLY",
                "THREETIMESAWEEK",
                "DAILY",
                "CONTINUOUS",
                "IRREGULAR",
                name="dcfrequencytype",
                checkfirst=True,
            ),
            nullable=True,
        ),
        sa.Column(
            "accrualPolicy",
            postgresql.ENUM(
                "CLOSED",
                "PASSIVE",
                "ACTIVE",
                "PARTIAL",
                name="dcaccrualpolicytype",
                checkfirst=True,
            ),
            nullable=True,
        ),
        sa.Column("bibliographicCitation", sa.String(), nullable=True),
        sa.Column("conformsTo", sa.String(), nullable=True),
        sa.Column("schema_id", sa.UUID(), nullable=True),
        sa.ForeignKeyConstraint(
            ["schema_id"],
            ["reference.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_project_description"), "project", ["description"], unique=False)
    op.create_index(op.f("ix_project_id"), "project", ["id"], unique=False)
    op.create_index(op.f("ix_project_name"), "project", ["name"], unique=False)
    op.create_index(op.f("ix_project_title"), "project", ["title"], unique=False)
    op.create_table(
        "subscription",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("subscription_id", sa.String(), nullable=False),
        sa.Column(
            "subscription_event_type",
            postgresql.ENUM(
                "PENDING",
                "CREATED",
                "COMPLETED",
                "RENEWED",
                "FAILED",
                "ENDED",
                name="subscriptioneventtype",
                checkfirst=True,
            ),
            nullable=False,
        ),
        sa.Column(
            "subscription_type",
            postgresql.ENUM(
                "REVIEWER",
                "EXPLORER",
                "RESEARCHER",
                "INVESTIGATOR",
                name="subscriptiontype",
                checkfirst=True,
            ),
            nullable=False,
        ),
        sa.Column("started", sa.DateTime(timezone=True), nullable=True),
        sa.Column("ends", sa.DateTime(timezone=True), nullable=True),
        sa.Column("override", sa.Boolean(), nullable=False),
        sa.Column("subscriber_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["subscriber_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_subscription_id"), "subscription", ["id"], unique=False)
    op.create_index(op.f("ix_subscription_subscription_id"), "subscription", ["subscription_id"], unique=False)
    op.create_table(
        "invitation",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("full_name", sa.String(), nullable=True),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column(
            "response",
            postgresql.ENUM(
                "WAITING",
                "ACCEPTED",
                "REFUSED",
                name="invitationresponsetype",
                checkfirst=True,
            ),
            nullable=False,
        ),
        sa.Column("sender_id", sa.UUID(), nullable=False),
        sa.Column("project_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["project_id"],
            ["project.id"],
        ),
        sa.ForeignKeyConstraint(
            ["sender_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email", "project_id", name="_project_invitation_uc"),
    )
    op.create_index(op.f("ix_invitation_email"), "invitation", ["email"], unique=False)
    op.create_index(op.f("ix_invitation_full_name"), "invitation", ["full_name"], unique=False)
    op.create_index(op.f("ix_invitation_id"), "invitation", ["id"], unique=False)
    op.create_table(
        "project_subject",
        sa.Column("project_id", sa.UUID(), nullable=False),
        sa.Column("subject_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["project_id"],
            ["project.id"],
        ),
        sa.ForeignKeyConstraint(
            ["subject_id"],
            ["subject.id"],
        ),
        sa.PrimaryKeyConstraint("project_id", "subject_id"),
    )
    op.create_table(
        "task",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("modified", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("is_private", sa.Boolean(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("title", sa.String(), nullable=True),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("frequency", sa.String(), nullable=True),
        sa.Column("spatial", sa.String(), nullable=True),
        sa.Column("temporalStart", sa.DateTime(timezone=True), nullable=True),
        sa.Column("temporalEnd", sa.DateTime(timezone=True), nullable=True),
        sa.Column("language", sa.String(length=64), nullable=True),
        sa.Column("creator", sa.String(), nullable=True),
        sa.Column("contributor", sa.String(), nullable=True),
        sa.Column("publisher", sa.String(), nullable=True),
        sa.Column("rights", sa.String(), nullable=True),
        sa.Column("source", sa.String(), nullable=True),
        sa.Column("accessRights", sa.String(), nullable=True),
        sa.Column(
            "accrualMethod",
            postgresql.ENUM(
                "DEPOSIT",
                "DONATION",
                "PURCHASE",
                "LOAN",
                "LICENSE",
                "ITEMCREATION",
                name="dcaccrualtype",
                checkfirst=True,
            ),
            nullable=True,
        ),
        sa.Column(
            "accrualPeriodicity",
            postgresql.ENUM(
                "TRIENNIAL",
                "BIENNIAL",
                "ANNUAL",
                "SEMIANNUAL",
                "THREETIMESAYEAR",
                "QUARTERLY",
                "BIMONTHLY",
                "MONTHLY",
                "SEMIMONTHLY",
                "BIWEEKLY",
                "THREETIMESAMONTH",
                "WEEKLY",
                "SEMIWEEKLY",
                "THREETIMESAWEEK",
                "DAILY",
                "CONTINUOUS",
                "IRREGULAR",
                name="dcfrequencytype",
                checkfirst=True,
            ),
            nullable=True,
        ),
        sa.Column("accrualPriority", sa.Integer(), nullable=True),
        sa.Column(
            "accrualPolicy",
            postgresql.ENUM(
                "CLOSED",
                "PASSIVE",
                "ACTIVE",
                "PARTIAL",
                name="dcaccrualpolicytype",
                checkfirst=True,
            ),
            nullable=True,
        ),
        sa.Column("bibliographicCitation", sa.String(), nullable=True),
        sa.Column("conformsTo", sa.String(), nullable=True),
        sa.Column("datasource_id", sa.UUID(), nullable=True),
        sa.Column("crosswalk_id", sa.UUID(), nullable=True),
        sa.Column("schema_id", sa.UUID(), nullable=True),
        sa.Column("project_id", sa.UUID(), nullable=True),
        sa.ForeignKeyConstraint(
            ["crosswalk_id"],
            ["referencetemplate.id"],
        ),
        sa.ForeignKeyConstraint(
            ["datasource_id"],
            ["referencetemplate.id"],
        ),
        sa.ForeignKeyConstraint(
            ["project_id"],
            ["project.id"],
        ),
        sa.ForeignKeyConstraint(
            ["schema_id"],
            ["reference.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_task_description"), "task", ["description"], unique=False)
    op.create_index(op.f("ix_task_id"), "task", ["id"], unique=False)
    op.create_index(op.f("ix_task_name"), "task", ["name"], unique=False)
    op.create_index(op.f("ix_task_title"), "task", ["title"], unique=False)
    op.create_table(
        "resource",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("modified", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("is_private", sa.Boolean(), nullable=False),
        sa.Column("name", sa.String(), nullable=True),
        sa.Column("title", sa.String(), nullable=True),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column(
            "state",
            postgresql.ENUM(
                "BUSY",
                "READY",
                "DATA_READY",
                "SCHEMA_READY",
                "CROSSWALK_READY",
                "TRANSFORM_READY",
                "IMPORT_ERROR",
                "DATA_ERROR",
                "SCHEMA_ERROR",
                "CROSSWALK_ERROR",
                "TRANSFORM_ERROR",
                "ERROR",
                "COMPLETE",
                name="statetype",
                checkfirst=True,
            ),
            nullable=False,
        ),
        sa.Column("datasource_id", sa.UUID(), nullable=True),
        sa.Column("data_id", sa.UUID(), nullable=True),
        sa.Column("schema_subject_id", sa.UUID(), nullable=True),
        sa.Column("crosswalk_id", sa.UUID(), nullable=True),
        sa.Column("schema_object_id", sa.UUID(), nullable=True),
        sa.Column("transform_id", sa.UUID(), nullable=True),
        sa.Column("transformdata_id", sa.UUID(), nullable=True),
        sa.Column("transformdatasource_id", sa.UUID(), nullable=True),
        sa.Column("task_id", sa.UUID(), nullable=True),
        sa.ForeignKeyConstraint(
            ["crosswalk_id"],
            ["reference.id"],
        ),
        sa.ForeignKeyConstraint(
            ["data_id"],
            ["reference.id"],
        ),
        sa.ForeignKeyConstraint(
            ["datasource_id"],
            ["reference.id"],
        ),
        sa.ForeignKeyConstraint(
            ["schema_object_id"],
            ["reference.id"],
        ),
        sa.ForeignKeyConstraint(
            ["schema_subject_id"],
            ["reference.id"],
        ),
        sa.ForeignKeyConstraint(
            ["task_id"],
            ["task.id"],
        ),
        sa.ForeignKeyConstraint(
            ["transform_id"],
            ["reference.id"],
        ),
        sa.ForeignKeyConstraint(
            ["transformdata_id"],
            ["reference.id"],
        ),
        sa.ForeignKeyConstraint(
            ["transformdatasource_id"],
            ["reference.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_resource_description"), "resource", ["description"], unique=False)
    op.create_index(op.f("ix_resource_id"), "resource", ["id"], unique=False)
    op.create_index(op.f("ix_resource_name"), "resource", ["name"], unique=False)
    op.create_index(op.f("ix_resource_title"), "resource", ["title"], unique=False)
    op.create_table(
        "activity",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("message", sa.String(), nullable=False),
        sa.Column("custodians_only", sa.Boolean(), nullable=False),
        sa.Column("alert", sa.Boolean(), nullable=False),
        sa.Column("researcher_id", sa.UUID(), nullable=False),
        sa.Column("resource_id", sa.UUID(), nullable=True),
        sa.Column("task_id", sa.UUID(), nullable=True),
        sa.Column("project_id", sa.UUID(), nullable=True),
        sa.ForeignKeyConstraint(
            ["project_id"],
            ["project.id"],
        ),
        sa.ForeignKeyConstraint(
            ["researcher_id"],
            ["user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["resource_id"],
            ["resource.id"],
        ),
        sa.ForeignKeyConstraint(
            ["task_id"],
            ["task.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_activity_id"), "activity", ["id"], unique=False)
    op.create_table(
        "role",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("researcher_id", sa.UUID(), nullable=False),
        sa.Column("is_validated", sa.Boolean(), nullable=False),
        sa.Column(
            "responsibility",
            postgresql.ENUM(
                "CUSTODIAN",
                "CURATOR",
                "WRANGLER",
                "SEEKER",
                name="roletype",
                checkfirst=True,
            ),
            nullable=False,
        ),
        sa.Column("project_id", sa.UUID(), nullable=True),
        sa.Column("task_id", sa.UUID(), nullable=True),
        sa.Column("resource_id", sa.UUID(), nullable=True),
        sa.Column("reference_id", sa.UUID(), nullable=True),
        sa.Column("referencetemplate_id", sa.UUID(), nullable=True),
        sa.ForeignKeyConstraint(
            ["project_id"],
            ["project.id"],
        ),
        sa.ForeignKeyConstraint(
            ["reference_id"],
            ["reference.id"],
        ),
        sa.ForeignKeyConstraint(
            ["referencetemplate_id"],
            ["referencetemplate.id"],
        ),
        sa.ForeignKeyConstraint(
            ["researcher_id"],
            ["user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["resource_id"],
            ["resource.id"],
        ),
        sa.ForeignKeyConstraint(
            ["task_id"],
            ["task.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_role_id"), "role", ["id"], unique=False)
    op.alter_column("token", "authenticates_id", existing_type=sa.UUID(), nullable=False)
    op.drop_column("token", "is_valid")
    op.add_column("user", sa.Column("customer_id", sa.String(), nullable=True))
    op.alter_column(
        "user",
        "created",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "user",
        "modified",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column("user", "email_validated", existing_type=sa.BOOLEAN(), nullable=False)
    op.alter_column("user", "is_active", existing_type=sa.BOOLEAN(), nullable=False)
    op.alter_column("user", "is_superuser", existing_type=sa.BOOLEAN(), nullable=False)
    op.create_index(op.f("ix_user_customer_id"), "user", ["customer_id"], unique=True)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_user_customer_id"), table_name="user")
    op.alter_column("user", "is_superuser", existing_type=sa.BOOLEAN(), nullable=True)
    op.alter_column("user", "is_active", existing_type=sa.BOOLEAN(), nullable=True)
    op.alter_column("user", "email_validated", existing_type=sa.BOOLEAN(), nullable=True)
    op.alter_column(
        "user",
        "modified",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "user",
        "created",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.drop_column("user", "customer_id")
    op.add_column("token", sa.Column("is_valid", sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.alter_column("token", "authenticates_id", existing_type=sa.UUID(), nullable=True)
    op.drop_index(op.f("ix_role_id"), table_name="role")
    op.drop_table("role")
    op.drop_index(op.f("ix_activity_id"), table_name="activity")
    op.drop_table("activity")
    op.drop_index(op.f("ix_resource_title"), table_name="resource")
    op.drop_index(op.f("ix_resource_name"), table_name="resource")
    op.drop_index(op.f("ix_resource_id"), table_name="resource")
    op.drop_index(op.f("ix_resource_description"), table_name="resource")
    op.drop_table("resource")
    op.drop_index(op.f("ix_task_title"), table_name="task")
    op.drop_index(op.f("ix_task_name"), table_name="task")
    op.drop_index(op.f("ix_task_id"), table_name="task")
    op.drop_index(op.f("ix_task_description"), table_name="task")
    op.drop_table("task")
    op.drop_table("project_subject")
    op.drop_index(op.f("ix_invitation_id"), table_name="invitation")
    op.drop_index(op.f("ix_invitation_full_name"), table_name="invitation")
    op.drop_index(op.f("ix_invitation_email"), table_name="invitation")
    op.drop_table("invitation")
    op.drop_index(op.f("ix_subscription_subscription_id"), table_name="subscription")
    op.drop_index(op.f("ix_subscription_id"), table_name="subscription")
    op.drop_table("subscription")
    op.drop_index(op.f("ix_project_title"), table_name="project")
    op.drop_index(op.f("ix_project_name"), table_name="project")
    op.drop_index(op.f("ix_project_id"), table_name="project")
    op.drop_index(op.f("ix_project_description"), table_name="project")
    op.drop_table("project")
    op.drop_index(op.f("ix_price_id"), table_name="price")
    op.drop_table("price")
    op.drop_index(op.f("ix_order_subscription_id"), table_name="order")
    op.drop_index(op.f("ix_order_product_id"), table_name="order")
    op.drop_index(op.f("ix_order_id"), table_name="order")
    op.drop_index(op.f("ix_order_checkout_id"), table_name="order")
    op.drop_table("order")
    op.drop_index(op.f("ix_oguntoken_token"), table_name="oguntoken")
    op.drop_table("oguntoken")
    op.drop_index(op.f("ix_subject_id"), table_name="subject")
    op.drop_table("subject")
    op.drop_index(op.f("ix_referencetemplate_title"), table_name="referencetemplate")
    op.drop_index(op.f("ix_referencetemplate_name"), table_name="referencetemplate")
    op.drop_index(op.f("ix_referencetemplate_model_type"), table_name="referencetemplate")
    op.drop_index(op.f("ix_referencetemplate_model"), table_name="referencetemplate")
    op.drop_index(op.f("ix_referencetemplate_id"), table_name="referencetemplate")
    op.drop_index(op.f("ix_referencetemplate_description"), table_name="referencetemplate")
    op.drop_table("referencetemplate")
    op.drop_index(op.f("ix_reference_title"), table_name="reference")
    op.drop_index(op.f("ix_reference_name"), table_name="reference")
    op.drop_index(op.f("ix_reference_model_type"), table_name="reference")
    op.drop_index(op.f("ix_reference_model"), table_name="reference")
    op.drop_index(op.f("ix_reference_id"), table_name="reference")
    op.drop_index(op.f("ix_reference_hash"), table_name="reference")
    op.drop_index(op.f("ix_reference_description"), table_name="reference")
    op.drop_table("reference")
    op.drop_index(op.f("ix_product_name"), table_name="product")
    op.drop_index(op.f("ix_product_id"), table_name="product")
    op.drop_index(op.f("ix_product_description"), table_name="product")
    op.drop_table("product")
    # ### end Alembic commands ###
